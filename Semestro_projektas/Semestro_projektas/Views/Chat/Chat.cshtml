@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model IEnumerable<Message>
@{
    IEnumerable<User> users = ViewData["User"] as IEnumerable<User>;
    IEnumerable<Channel> userChannels = ViewData["userChannels"] as IEnumerable<Channel>;
}

<style>
    div.panel-body {
        overflow: scroll;
        background: url('http://subtlepatterns.com/patterns/geometry2.png');
    }

    .expand {
        font-weight: bold;
        font-style: italic;
        font-size: 12px;
        cursor: pointer;
    }

    .expandable {
        display: none;
    }

    /* Create three equal columns that floats next to each other */
    .column {
        float: left;
        padding: 15px;
        position:relative;
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }

    #userChannels tr {
        background-color: #eee;
        border-top: 1px solid #fff;
        height: 30px;
    }

        #userChannels tr:hover {
            background-color: #ccc;
        }

    #userChannels th {
        background-color: #fff;
    }

    #userChannels th, #userChannels td {
        padding: 3px 5px;
    }

        #userChannels td:hover {
            cursor: pointer;
        }



    #ChannelUsers tr {
        background-color: #eee;
        border-top: 1px solid #fff;
        height: 30px;
    }

        #ChannelUsers tr:hover {
            background-color: #ccc;
        }

    #ChannelUsers th {
        background-color: #fff;
    }

    #ChannelUsers th, #ChannelUsers td {
        padding: 3px 5px;
    }

        #ChannelUsers td:hover {
            cursor: pointer;
        }
    .kickrow {
        width: 100px;
        background-color: grey;
        background-image: url('@Url.Content("~/images/kick.png")');
        background-repeat: no-repeat;
        background-size: 80%;
    }



    .searchcontainer {
        width: 100%;
        margin: auto;
        background-image: url('@Url.Content("~/images/header.png")');
        overflow: hidden;
        background-repeat: no-repeat;
        background-size: cover;
        padding: 5%;
    }

        .searchcontainer input {
            background: #ffffff57;
            border: 0;
            font-size: 20px;
            color: #fff;
            margin-left: auto;
            margin-right: auto;
            width: 90%;
        }

        .searchcontainer button {
            background-image: url('@Url.Content("~/images/search.svg")');
            background-repeat: no-repeat;
            background-color: #fff;
            background-position: center;
            width: 50px;
            height: 50px;
            border: none;
        }

            .searchcontainer button:hover {
                background-image: url('@Url.Content("~/images/search.svg")');
                background-repeat: no-repeat;
                background-color: #ffa;
                background-position: center;
                width: 50px;
                height: 50px;
                border: none;
            }


    #results {
        border-top: 2px solid #999;
        margin-left: auto;
        margin-right: auto;
        width: 70%;
        position:absolute;
    }

    .suggestions {
        padding: 15px;
        font-size: 15px;
        background: white;
        border-top: 1px solid #666;
        cursor: pointer;
        margin-left: auto;
        margin-right: auto;
        width: 90%;

    }

        .suggestions:hover {
            background-color: #1e4dd4;
        }

    .emphy {
        width: 50%;
        margin: 40px auto;
        text-align: center;
        color: white;
    }

    #searchInput:focus {
        background: url('@Url.Content("~/images/search.svg")') left no-repeat white;
        background-size: 20px;
        background-position: 20px;
        padding-left: 55px;
        width: 92%;
        font-size: 20px;
        color: #000;
    }

    .editableMessage:hover {
         background-color: rgba(244, 235, 158, 0.5);
    }

    #discussion {
        width:100%;
    }

</style>
<div class="row">
    <div class="column" style="width:15%;">


        <div class="searchcontainer">

            <h3>Vartotojų paieška</h3>

            <input type="text" id="searchInput">
            <div id="results"></div>
            <br>
            <br>


        </div>


        <div class="chat-channels">

            <h3>Vartotojo kanalai</h3>
            <div class="panel-body" id="chatChannels" style="height:250px;">
                <table class="table" id="userChannels"></table>
            </div>
        </div>
        <br>
        <p class="expand" id="expand-2"><input type="button" class="btn btn-warning btn-sm" id="getChannels" value="Naujas kanalas"></p>
        <div class="expandable" id="expandable-2">
            <input id="newChannel" type="text" class="form-control input-sm" placeholder="Kanalo pavadinimas" />
            <br>
            <input type="button" class="btn btn-warning btn-sm" id="createChannel" value="Kurti kanalą">
        </div>

    </div>
    <div class="column" style="width:70%;">
        <h2>Studentų Chat'as</h2>
        <div class="chat-panel panel panel-default">
            <div class="panel-heading">
                @if (User.Identity.IsAuthenticated)
                {
                    <h3> Prisijungęs kaip @User.Identity.Name</h3>
                }
                else
                {
                    <h3> Prisijungęs kaip Guest</h3>
                }


                <i class="fa fa-paper-plane fa-fw"></i>
                <h3 id="selectedChannel"></h3>
            </div>
            <!-- /.panel-heading -->
            <div class="panel-body" id="chat" style="height:250px;">
                <input type="hidden" id="displayname" />

                <table id="discussion"></table>
            </div>
            <!-- /.panel-body -->
            <div class="panel-footer">
                <div class="input-group">
                    <input id="message" type="text" name="message" class="form-control input-sm" placeholder="Type your message here..." />

                    <span class="input-group-btn">
                        <input type="button" class="btn btn-warning btn-sm" id="sendmessage" value="Send">

                    </span>
                </div>
            </div>

            <div>
                <p class="expand" id="expand-1">Registruoti vartotojai (išskleisti)</p>
            </div>
            <div class="expandable" id="expandable-1">
                @foreach (var user in users)
                {
                    <p>@user.UserName</p>
                    /*foreach (var userChannel in user.channelUsers) {
                        <p>@userChannel.Channel.Name</p>
                    }*/
                }
            </div>

        </div>
    </div>
    <div class="column" style="width:15%;">

        <div class="channel-users">

            <h3>Vartotojai kanale</h3>
            <div class="panel-body" id="chatChannelUsers" style="height:250px;">
                <table class="table" id="ChannelUsers"></table>
            </div>
        </div>

    </div>
    </div>
    @section scripts {
        <!--Script references. -->
        <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
        <!--Reference the SignalR library. -->
        <script src="~/js/signalr/signalr.js"></script>
        <!--Reference the autogenerated SignalR hub script. -->
        <!--<script src="~/signalr/hubs"></script>-->
        <!--SignalR script to update the chat page and send messages.-->


        <script>
        let channels = new Array();
        let currentChannel = 1;
        const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .build();
        $(function () {


            // Reference the auto-generated proxy for the hub.
            // const chat = $.connection.chatHub;
            

            connection.start().catch(err => console.error(err.toString()));

            //var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            //chat.client.addNewMessageToPage = function (name, message) {
            connection.on('Send', (name, message, channel) => {

            // Add the message to the page.

            let userName = '@User.Identity.Name';

            if (userName == "") {
                userName = "Guest";
                }
                if (channel === currentChannel) {
                    if ("@User.Identity.Name" === name) {
                                $('#discussion').append("<tr style='color:green; text-align:left; width:100%; display:inline-table;'><th><img src='@Url.Content("~/images/avatar.png")' style='width:40px;' id='profile-pic" +
                                    name + "'><strong>" + htmlEncode(name) +
                                    "</strong></th></tr><tr class='editableMessage' style='color:black; text-align:left; width:100%; display:table-row;'><th id='content" + name +
                                    "' style='word-break: break-word; width:100%;'>" + htmlEncode(message) + "<textarea id='edit" +
                                    name + "' style='visibility: hidden; width: 0;'>" +
                                    message + "</textarea></th><th style='display:inline-flex;'><button id='saveEdit" +
                                    name + "' onclick='saveEdit(" + name + ")' style='visibility: hidden; width: 0;'>Išsaugoti</button><button id='editMessage" +
                                    name + "' onclick='editMessage(" + name + ")'  style='float:right;'>Redaguoti</button><button id='deleteMessage" +
                                    name + "' onclick='deleteMessage(" + name + ")'  style='float:right;'>Trinti</button></th></tr>");
                            }
                            else {
                                $('#discussion').append("<tr style='color:green; text-align:left; width:100%; display:inline-table;'><th><img src='@Url.Content("~/images/avatar.png")' style='width:40px;' id='profile-pic" +
                                    name + "'><strong>" + htmlEncode(name) +
                                    "</strong></th></tr><tr class='otherMessage' style='color:black; text-align:left; width:100%; display:table-row;'><th id='content" + name +
                                    "' style='word-break: break-word; width:100%;'>" + htmlEncode(message) + "</th><th></th></tr>");
                            }
                }

            });

            connection.on('AddChannelUser', (newUser, channel) => {
                console.log(currentChannel);
                if (currentChannel === channel) {
                    $("#ChannelUsers").append("<tr><td>" + newUser + "</td></tr>");
                   
                }

            });

            connection.on('AddChannelToUser', (userName) => {
                if ('@User.Identity.Name' === userName) {
                    getUserChannels();
                }

            });

            connection.on('EditMessage', (value, id, channel) => {
                if (channel === currentChannel) {
                    if ($("#" + id).find('textarea')[0]) {
                        let txtArea = $("#" + id).find('textarea')[0].outerHTML;
                        $("#" + id).html(value + txtArea);
                    }
                    else {
                        $("#" + id).html(value);
                    }
                }
            });
            

            //};
            // Get the user name and store it to prepend to messages.
            //$('#displayname').val(prompt('Enter your name:', ''));
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            //$connection.hub.start().done(function () {
            $('#sendmessage').click(function () {
                    let userName = '@User.Identity.Name';
                    let message = $('#message').val();
                    if (userName == "") {
                        userName = "Guest";
                    }
                    // Call the Send method on the hub.
                // chat.server.send($('#displayname').val(), $('#message').val());
                connection.invoke('Send', userName, message, currentChannel);
                // Clear text box and reset focus for next comment.
                $('#message').val('').focus();

                //Save sent message in the database using ajax request
                $.ajax({
                    url: '@Url.Action("Send")',
                    type: "POST",
                    data: { name: userName, text: message, channelId: currentChannel },
                    dataType: "json",
                    success: function (response) {
                        console.log("success send message!");

                    },
                    failure: function (response) {
                        console.log("failure send message!");
                    }

                });
                updateScroll();
                });
            //});


            $('#createChannel').click(function () {
                
                let channelName = $('#newChannel').val();
                if (channelName.length >= 1) {
                    $.ajax({
                        url: '@Url.Action("CreateChannel")',
                        type: "POST",
                        data: { name: channelName, userName: "@User.Identity.Name" },
                        dataType: "json",
                        success: function (response) {
                            console.log("success create channel! " + response);
                            $('#userChannels').empty()
                            getUserChannels();
                            
                           // connection.invoke('AddChannelToUser', channelName, '@User.Identity.Name');
                        },
                        failure: function (response) {
                            console.log("failure send message!");
                        }

                    });
                }
            });



            getUserChannels();

            let lastentry = "";
            $('#searchInput').keyup(function (event) {
                let newText = $('#searchInput').val();
                $('#results').empty();
                if (newText != lastentry && newText.length >= 1) {

                    fetchData($(this).val());
                }
                lastentry = $('#searchInput').val();
            });


            //On enter key press when inside input field send message
            $('#message').keypress(function (e) {
                var key = e.which;
                if (key == 13)  // the enter key code
                {
                    $('#sendmessage').click();
                    return false;
                }
            });

            $('html').click(function (e) {
                if (e.target.className !== "suggestions") {
                    $('#results').empty();
                }
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }


        function updateScroll() {
            var element = document.getElementById("chat");
            element.scrollTop = element.scrollHeight + 100;
                }

                function selectChannel(id) {
                    currentChannel = id;
                    channels.forEach((element) => {
                        if (element.Id === id) {
                            $("#selectedChannel").text("Pasirinktas kanalas: " + element.Name);
                        }
                    });
                    loadChatLog(currentChannel);
                    getChannelUsers();

                }


                function loadChatLog(channel) {
                    $.ajax({
                    url: '@Url.Action("GetChatMessages")',
                        type: "POST",
                        data: { chatId: channel, userName: "@User.Identity.Name" },
                    dataType: "json",
                    success: function (response) {
                        console.log("success get messages! " + response + " response");
                        msgs = JSON.parse(response);
                        $('#discussion').empty()
                        msgs.forEach((element) => {
                            if ("@User.Identity.Name" === element.Author) {
                                $('#discussion').append("<tr style='color:green; text-align:left; width:100%; display:inline-table;'><th><img src='@Url.Content("~/images/avatar.png")' style='width:40px;' id='profile-pic" +
                                    element.Id + "'><strong>" + htmlEncode(element.Author) +
                                    "</strong></th></tr><tr class='editableMessage' style='color:black; text-align:left; width:100%; display:table-row;'><th id='content" + element.Id +
                                    "' style='word-break: break-word; width:100%;'>" + htmlEncode(element.Content) + "<textarea id='edit" +
                                    element.Id + "' style='visibility: hidden; width: 0;'>" +
                                    element.Content + "</textarea></th><th style='display:inline-flex;'><button id='saveEdit" +
                                    element.Id + "' onclick='saveEdit(" + element.Id + ")' style='visibility: hidden; width: 0;'>Išsaugoti</button><button id='editMessage" +
                                    element.Id + "' onclick='editMessage(" + element.Id + ")'  style='float:right;'>Redaguoti</button><button id='deleteMessage" +
                                    element.Id + "' onclick='deleteMessage(" + element.Id + ")'  style='float:right;'>Trinti</button></th></tr>");
                            }
                            else {
                                $('#discussion').append("<tr style='color:green; text-align:left; width:100%; display:inline-table;'><th><img src='@Url.Content("~/images/avatar.png")' style='width:40px;' id='profile-pic" +
                                    element.Id + "'><strong>" + htmlEncode(element.Author) +
                                    "</strong></th></tr><tr class='otherMessage' style='color:black; text-align:left; width:100%; display:table-row;'><th id='content" + element.Id +
                                    "' style='word-break: break-word; width:100%;'>" + htmlEncode(element.Content) + "</th><th></th></tr>");
                            }
                        });

                    },
                    failure: function (response) {
                        console.log("failure getting messages!");
                    }

                    });
        }


        async function getUsersJson() {
            let usersjson = null;
            return $.ajax({
                    url: '@Url.Action("GetUsersJson")',
                        type: "POST",
                    dataType: "json",
                    success: function (response) {
                        console.log("success get messages! " + response + " response");
                        usersjson = JSON.parse(response);

                    },
                    failure: function (response) {
                        console.log("failure getting messages!");
                    }

            }).then(response => usersjson);
        }

        async function fetchData(search) {

            //let search = document.getElementById("searchInput").value;
            console.log(search);
            let data = await getUsersJson();
            if (!$('#results').is(':empty')) {
                $('#results').empty();
            }

            let dataArray = new Array();

            data.forEach((element) => {
                if (element.UserName.startsWith(search)) {
                    dataArray.push(element);
                }
            });

            let resultLength = dataArray.length;

            if (resultLength > 8) {
                resultLength = 8;
            }


            for (i = 0; i < resultLength; i++) {
                let node = document.createElement("div")//("<div class='suggestions' onclick='selectSuggestion()'></div>");

                node.setAttribute("class", "suggestions");
                let theFunction = "selectSuggestion(\"" + dataArray[i].UserName + "\")";
                //alert(theFunction);
                node.setAttribute("onclick", theFunction);

                let img = document.createElement('img');
                img.src = '@Url.Content("~/images/prideti.png")';
                img.width = "15";
                node.appendChild(img);
                node.appendChild(document.createTextNode(dataArray[i].UserName));

                document.getElementById('results').appendChild(node);
                //$('#suggestion' + i).append(data.results[i].original_title);
                //$('#suggestion' + i).append("</br>");
                //$('#suggestion' + i).append(data.results[i].vote_average + " Rating, ");
                //$('#suggestion' + i).append(new Date(data.results[i].release_date).getFullYear());
                //$('#suggestion' + i).append("</br>");
                //$('#results' + i).append("</div>");

            }


            console.log(dataArray);

        }

        function selectSuggestion(userNm) {

            $.ajax({
                url: '@Url.Action("AddUserToChannel")',
                type: "POST",
                data: { userName: userNm, inviterName: "@User.Identity.Name", channelId: currentChannel },
                dataType: "json",
                success: function (response) {

                    console.log("success add user! " + response + " response");
                    connection.invoke('AddChannelUser', userNm, currentChannel);
                    connection.invoke('AddChannelToUser', userNm);
                }
            });
            $('#results').empty();
            $('#searchInput').empty();
        }


        $('.expand').click(function () {
            target_num = $(this).attr('id').split('-')[1];
            content_id = '#expandable-'.concat(target_num);
            $(content_id).slideToggle('fast');
            });




            function getChannelUsers() {
                 $.ajax({
                    url: '@Url.Action("GetChannelUsers")',
                        type: "POST",
                     data: { chatId: currentChannel, userName: "@User.Identity.Name" },
                    dataType: "json",
                    success: function (response) {
                        
                        let users = JSON.parse(response);
                        console.log("success get messages! " + users + " response ilgis " + users.length);
                        $('#ChannelUsers').empty()
                        users.forEach((element) => {
                            //$("#ChannelUsers").append("<tr><td>" + element.UserName + "</td> <td class='kickrow' onclick=\"kickUser('" + element.Id + "')\">        </td></tr>");
                            $("#ChannelUsers").append("<tr><td>" + element.UserName + "</td></tr>");
                        });

                    },
                    failure: function (response) {
                        console.log("failure getting messages!");
                    }

                });

            }


            function kickUser(uId) {
                 $.ajax({
                    url: '@Url.Action("KickChannelUser")',
                     type: "POST",
                     data: { chatId: currentChannel, userId: uId },
                    dataType: "json",
                     success: function (response) {
                         console.log(response);
                       /* let users = JSON.parse(response);
                        console.log("success get messages! " + msgs + " response ilgis " + msgs.length);
                        $('#ChannelUsers').empty()
                        msgs.forEach((element) => {
                            
                            $("#ChannelUsers").append("<tr><td>" + element.UserName + "</td> <td class='kickrow' onclick=\"kickUser('" + element.Id +  "')\">        </td></tr>");
                        });*/

                    },
                    failure: function (response) {
                        console.log("failure getting messages!");
                    }

                    });
            }

            function getUserChannels() {
                $.ajax({
                    url: '@Url.Action("GetUserChannels")',
                    type: "POST",
                    data: { userName: "@User.Identity.Name" },
                    dataType: "json",
                    success: function (response) {
                        console.log("success send message! " + response + " response");
                        channels = JSON.parse(response);
                        $("#userChannels").empty();
                        channels.forEach((element) => {
                            $("#userChannels").append("<tr onclick='selectChannel(" + element.Id + ")'><td>" + element.Name + "</td></tr>");
                        });
                        //selectChannel(channels[0].Id);

                    },
                    failure: function (response) {
                        console.log("failure send message!");
                    }

                });
            }

            function editMessage(id) {
                let elId = "edit" + id;
                let contId = "content" + id;
                let editbtnId = "editMessage" + id;
                let deletebtnId = "deleteMessage" + id;
                let saveEditbtnId = "saveEdit" + id;
                $("#" + elId).css("visibility", "visible"); 
                $("#" + elId).css("width", "-webkit-fill-available");
                $("#" + saveEditbtnId).css("visibility", "visible");
                $("#" + saveEditbtnId).css("width", "fit-content"); 
                $("#" + contId).css("width", "0"); 
                $("#" + contId).css("visibility", "hidden");  
                $("#" + editbtnId).css("width", "0");
                $("#" + editbtnId).css("visibility", "hidden");
                $("#" + deletebtnId).css("width", "0");
                $("#" + deletebtnId).css("visibility", "hidden");
            }


            function saveEdit(id) {
                let elId = "edit" + id;
                let value = $("#" + elId).val();
                let contId = "content" + id;
                let editbtnId = "editMessage" + id;
                let deletebtnId = "deleteMessage" + id;
                let saveEditbtnId = "saveEdit" + id;
                //alert("save edit " + id);
                $.ajax({
                    url: '@Url.Action("EditMessage")',
                        type: "POST",
                     data: {messageId: id, message: value, userName: "@User.Identity.Name" },
                    dataType: "json",
                    success: function (response) {
                        $("#" + contId).css("width", "fit-content");
                        $("#" + contId).css("visibility", "visible");  
                        $("#" + editbtnId).css("width", "fit-content");
                        $("#" + editbtnId).css("visibility", "visible");
                        $("#" + deletebtnId).css("width", "fit-content");
                        $("#" + deletebtnId).css("visibility", "visible");
                        $("#" + elId).css("visibility", "hidden");
                        $("#" + elId).css("width", "0");
                        $("#" + saveEditbtnId).css("visibility", "hidden");
                        $("#" + saveEditbtnId).css("width", "0");
                        $("#" + elId).html(value);
                        $("#" + contId).html($("#" + elId).parent().html());
                        connection.invoke('EditMessage', value, contId, currentChannel);
                    },
                    failure: function (response) {
                        console.log("failure getting messages!");
                    }

                    });
            }

            

        </script>


        <!--//foreach (var msg in Model)
            {
                <script>
         $('#discussion').append('<p style="color:green; text-align:left; width:500px"><strong>' +
             htmlEncode('msg.Author') + ' :</strong> ' + htmlEncode('msg.Content') + '</p>');
                </script>
            }
            <script>updateScroll();</script>
        }-->
    }
