@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model IEnumerable<Message>
@{
}

<style>
    div.panel-body {
        overflow: scroll;
        background: url('http://subtlepatterns.com/patterns/geometry2.png');
    }
</style>
<h2>ChatBox</h2>
<div class="chat-panel panel panel-default">
    <div class="panel-heading">
        ChatBox using SingalR
        @if (User.Identity.IsAuthenticated)
        {
            <h3> Prisijungęs kaip @User.Identity.Name</h3>
        }
        else {
            <h3> Prisijungęs kaip Guest</h3>
        }
        <i class="fa fa-paper-plane fa-fw"></i>
    </div>
    <!-- /.panel-heading -->
    <div class="panel-body" id="chat" style="height:250px;">
        <input type="hidden" id="displayname" />

        <p id="discussion"></p>
    </div>
    <!-- /.panel-body -->
    <div class="panel-footer">
        <div class="input-group">
            <input id="message" type="text" name="message" class="form-control input-sm" placeholder="Type your message here..." />

            <span class="input-group-btn">
                <input type="button" class="btn btn-warning btn-sm" id="sendmessage" value="Send">

            </span>
        </div>
    </div>
</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/js/signalr/signalr.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <!--<script src="~/signalr/hubs"></script>-->
    <!--SignalR script to update the chat page and send messages.-->


    <script>
        $(function () {

            // Reference the auto-generated proxy for the hub.
            // const chat = $.connection.chatHub;
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .build();

            connection.start().catch(err => console.error(err.toString()));

            //var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            //chat.client.addNewMessageToPage = function (name, message) {
            connection.on('Send', (name, message) => {

            // Add the message to the page.

            let userName = '@User.Identity.Name';

            if (userName == "") {
                userName = "Guest";
            }

                $('#discussion').append('<p style="color:green; text-align:left; width:500px"><strong>' +
                    htmlEncode(name) + ' :</strong> ' + htmlEncode(message) + '</p>');


        });
            //};
            // Get the user name and store it to prepend to messages.
            //$('#displayname').val(prompt('Enter your name:', ''));
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            //$connection.hub.start().done(function () {
            $('#sendmessage').click(function () {
                    let userName = '@User.Identity.Name';
                    let message = $('#message').val();
                    if (userName == "") {
                        userName = "Guest";
                    }
                    // Call the Send method on the hub.
                // chat.server.send($('#displayname').val(), $('#message').val());
                    connection.invoke('Send', userName, message);
                    // Clear text box and reset focus for next comment.
                $('#message').val('').focus();

                //Save sent message in the database using ajax request
                $.ajax({
                    url: '@Url.Action("Send")',
                    type: "POST",
                    data: { name: userName, text: message },
                    dataType: "json",
                    success: function (response) {
                        console.log("success send message!");
                    },
                    failure: function (response) {
                        console.log("failure send message!");
                    }

                });
                updateScroll();
                });
            //});

            //On enter key press when inside input field send message
            $('#message').keypress(function (e) {
                var key = e.which;
                if (key == 13)  // the enter key code
                {
                    $('#sendmessage').click();
                    return false;
                }
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }


        function updateScroll() {
            var element = document.getElementById("chat");
            element.scrollTop = element.scrollHeight + 100;
        }

    </script>


    @foreach (var msg in Model)
    {
        <script>
         $('#discussion').append('<p style="color:green; text-align:left; width:500px"><strong>' +
             htmlEncode('@msg.Author') + ' :</strong> ' + htmlEncode('@msg.Content') + '</p>');
        </script>
    }
    <script>updateScroll();</script>
}
